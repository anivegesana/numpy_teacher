# This file has been generated by a machine. Do NOT modify it directly.
# To modify, go to the "numpy_teacher/rewrite_rules/_codegen/__main__.py" file and
# modify the code that generated this code.

from ast import *
from ._core import *
from ._comprehensions import *


class ComprehensionRewriter(Rewriter):
    def visit_comprehension(self, node):
        match node:
            # This collapses multiple 'if's that follow each other in the same comprehension
            # into one 'if' with multiple 'and's
            case comprehension(
                    target=target,
                    iter=in0,
                    ifs=in1,
                    is_async=is_async) if len(in1) > 1:
                nnode = comprehension(
                    target=target,
                    iter=in0,
                    ifs=[BoolOp(
                        op=And(),
                        values=in1
                    )],
                    is_async=is_async)
                nnode.lineno = target.lineno
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode
            # Remove unnecesary iter
            case comprehension(
                    target=target,
                    iter=Call(
                        func=Name(id='iter', ctx=Load()),
                        args=[in0],
                        keywords=[]
                    ),
                    ifs=in1,
                    is_async=is_async):
                nnode = comprehension(
                    target=target,
                    iter=in0,
                    ifs=in1,
                    is_async=is_async)
                nnode.lineno = target.lineno
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

class NumpyRewriter(Rewriter):
    def visit_ListComp(self, node):
        match node:
            # forall([var('v0'), 'in0'], '[v0 for v0 in in0]', 'list(in0)')
            case ListComp(
                elt=Name(id=v0, ctx=Load()),
                generators=[
                    comprehension(
                        target=Name(id=_v0_0, ctx=Store()),
                        iter=in0,
                        ifs=[],
                        is_async=0)]) if v0 == _v0_0:
                nnode = Call(
                    func=Name(id='list', ctx=Load()),
                    args=[
                        in0],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall([var('v0'), 'in0', 'in1'], '[v0 for v0 in in0 if in1]', 'list(filter(lambda v0: in1, in0))')
            case ListComp(
                elt=Name(id=v0, ctx=Load()),
                generators=[
                    comprehension(
                        target=Name(id=_v0_0, ctx=Store()),
                        iter=in0,
                        ifs=[
                            in1],
                        is_async=0)]) if v0 == _v0_0:
                nnode = Call(
                    func=Name(id='list', ctx=Load()),
                    args=[
                        Call(
                            func=Name(id='filter', ctx=Load()),
                            args=[
                                Lambda(
                                    args=arguments(
                                        posonlyargs=[],
                                        args=[
                                            arg(arg=v0)],
                                        kwonlyargs=[],
                                        kw_defaults=[],
                                        defaults=[]),
                                    body=in1),
                                in0],
                            keywords=[])],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_Assign(self, node):
        match node:
            # forall([var('v0'), 'in0'], '*v0, = in0', 'v0 = list(in0)', 'exec')
            case Assign(
                targets=[
                    Tuple(
                        elts=[
                            Starred(
                                value=Name(id=v0, ctx=Store()),
                                ctx=Store())],
                        ctx=Store())],
                value=in0):
                nnode = Assign(
                    targets=[
                        Name(id=v0, ctx=Store())],
                    value=Call(
                        func=Name(id='list', ctx=Load()),
                        args=[
                            in0],
                        keywords=[]))
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_BinOp(self, node):
        match node:
            # forall(['*elts', List() | ListComp() as val, 'val'], '1 * val_match', 'val')
            case BinOp(
                left=Constant(value=1),
                op=Mult(),
                right=List() | ListComp() as val):
                nnode = val
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['*elts', List() | ListComp() as val, 'val'], 'val_match * 1', 'val')
            case BinOp(
                left=List() | ListComp() as val,
                op=Mult(),
                right=Constant(value=1)):
                nnode = val
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', 'in1', List(elts=elts0) as in0, List(elts=elts1) as in1, List(elts=elts0+elts1)], 'x0 + x1', 'x2')
            case BinOp(left=List(elts=elts0) as in0, op=Add(), right=List(elts=elts1) as in1):
                nnode = List(elts=elts0+elts1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 + c1)], 'c0 + c1', '_const')
            case BinOp(left=Constant(value=c0), op=Add(), right=Constant(value=c1)):
                nnode = Constant(value=c0 + c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 - c1)], 'c0 - c1', '_const')
            case BinOp(left=Constant(value=c0), op=Sub(), right=Constant(value=c1)):
                nnode = Constant(value=c0 - c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 * c1)], 'c0 * c1', '_const')
            case BinOp(left=Constant(value=c0), op=Mult(), right=Constant(value=c1)):
                nnode = Constant(value=c0 * c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 / c1)], 'c0 / c1', '_const')
            case BinOp(left=Constant(value=c0), op=Div(), right=Constant(value=c1)):
                nnode = Constant(value=c0 / c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 ** c1)], 'c0 ** c1', '_const')
            case BinOp(left=Constant(value=c0), op=Pow(), right=Constant(value=c1)):
                nnode = Constant(value=c0 ** c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall(['in0', 'in1'], '-in0 + in1', 'in1 - in0', 'eval', ('body', -1, 'value'), 'is_pure(in0) or is_pure(in1)')
            case BinOp(
                left=UnaryOp(op=USub(), operand=in0),
                op=Add(),
                right=in1) if is_pure(in0) or is_pure(in1):
                nnode = BinOp(left=in1, op=Sub(), right=in0)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_Call(self, node):
        match node:
            # forall([(ListComp() | List() | BinOp(op=Add() | Mult())) as in0, 'out'], 'np.array(in0)', 'out', 'eval', ('body', -1, 'value'), '(out := analyze_list_to_array(in0, self))')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='array',
                    ctx=Load()),
                args=[
                    (ListComp() | List() | BinOp(op=Add() | Mult())) as in0],
                keywords=[]) if (out := analyze_list_to_array(in0, self)):
                nnode = out
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['*args', '*args1', '**kwargs1'], 'np.array(range(*args), *args1, **kwargs1)', 'np.arange(*args, *args1, **kwargs1)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='array',
                    ctx=Load()),
                args=[
                    Call(
                        func=Name(id='range', ctx=Load()),
                        args=[
                            *args],
                        keywords=[]),
                    *args1],
                keywords=[
                    *kwargs1]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='arange',
                        ctx=Load()),
                    args=[
                        *args,
                        *args1],
                    keywords=[
                        *kwargs1])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', '*args1', '**kwargs1'], 'np.array(list(in0), *args1, **kwargs1)', 'np.array(in0, *args1, **kwargs1)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='array',
                    ctx=Load()),
                args=[
                    Call(
                        func=Name(id='list', ctx=Load()),
                        args=[
                            in0],
                        keywords=[]),
                    *args1],
                keywords=[
                    *kwargs1]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='array',
                        ctx=Load()),
                    args=[
                        in0,
                        *args1],
                    keywords=[
                        *kwargs1])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', 'in1'], 'np.array(filter(in0, in1))', 'np.extract(in0, np.array(in1))')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='array',
                    ctx=Load()),
                args=[
                    Call(
                        func=Name(id='filter', ctx=Load()),
                        args=[
                            in0,
                            in1],
                        keywords=[])],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='extract',
                        ctx=Load()),
                    args=[
                        in0,
                        Call(
                            func=Attribute(
                                value=Name(id=self.aliases.numpy, ctx=Load()),
                                attr='array',
                                ctx=Load()),
                            args=[
                                in1],
                            keywords=[])],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall([var('v0'), 'in0', 'in1'], 'np.array([in1 for v0 in in0])', 'np.full(sum(1 for v0 in in0), in1)', 'eval', ('body', -1, 'value'), 'is_pure(in1)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='array',
                    ctx=Load()),
                args=[
                    ListComp(
                        elt=in1,
                        generators=[
                            comprehension(
                                target=Name(id=v0, ctx=Store()),
                                iter=in0,
                                ifs=[],
                                is_async=0)])],
                keywords=[]) if is_pure(in1):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='full',
                        ctx=Load()),
                    args=[
                        Call(
                            func=Name(id='sum', ctx=Load()),
                            args=[
                                GeneratorExp(
                                    elt=Constant(value=1),
                                    generators=[
                                        comprehension(
                                            target=Name(id=v0, ctx=Store()),
                                            iter=in0,
                                            ifs=[],
                                            is_async=0)])],
                            keywords=[]),
                        in1],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['v0', 'in0', '*args1', '**kwargs1'], 'sum(1 for v0 in enumerate(in0, *args1, **kwargs1))', 'sum(1 for v0 in in0)')
            case Call(
                func=Name(id='sum', ctx=Load()),
                args=[
                    GeneratorExp(
                        elt=Constant(value=1),
                        generators=[
                            comprehension(
                                target=v0,
                                iter=Call(
                                    func=Name(id='enumerate', ctx=Load()),
                                    args=[
                                        in0,
                                        *args1],
                                    keywords=[
                                        *kwargs1]),
                                ifs=[],
                                is_async=0)])],
                keywords=[]):
                nnode = Call(
                    func=Name(id='sum', ctx=Load()),
                    args=[
                        GeneratorExp(
                            elt=Constant(value=1),
                            generators=[
                                comprehension(
                                    target=v0,
                                    iter=in0,
                                    ifs=[],
                                    is_async=0)])],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', var('v0'), (Call(func=f0)) as in0], 'sum(1 for v0 in x0)', 'len(in0)', 'eval', ('body', -1, 'value'), 'is_sized(f0)')
            case Call(
                func=Name(id='sum', ctx=Load()),
                args=[
                    GeneratorExp(
                        elt=Constant(value=1),
                        generators=[
                            comprehension(
                                target=Name(id=v0, ctx=Store()),
                                iter=(Call(func=f0)) as in0,
                                ifs=[],
                                is_async=0)])],
                keywords=[]) if is_sized(f0):
                nnode = Call(
                    func=Name(id='len', ctx=Load()),
                    args=[
                        in0],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', var('v0'), List() | ListComp() | Tuple() | Set() | SetComp() | Dict() | DictComp() as in0], 'sum(1 for v0 in x0)', 'len(in0)')
            case Call(
                func=Name(id='sum', ctx=Load()),
                args=[
                    GeneratorExp(
                        elt=Constant(value=1),
                        generators=[
                            comprehension(
                                target=Name(id=v0, ctx=Store()),
                                iter=List() | ListComp() | Tuple() | Set() | SetComp() | Dict() | DictComp() as in0,
                                ifs=[],
                                is_async=0)])],
                keywords=[]):
                nnode = Call(
                    func=Name(id='len', ctx=Load()),
                    args=[
                        in0],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0'], 'len(range(in0))', 'max(in0, 0)')
            case Call(
                func=Name(id='len', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='range', ctx=Load()),
                        args=[
                            in0],
                        keywords=[])],
                keywords=[]):
                nnode = Call(
                    func=Name(id='max', ctx=Load()),
                    args=[
                        in0,
                        Constant(value=0)],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', 'in1'], 'len(range(in0, in1))', 'max(-in0 + in1, 0)')
            case Call(
                func=Name(id='len', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='range', ctx=Load()),
                        args=[
                            in0,
                            in1],
                        keywords=[])],
                keywords=[]):
                nnode = Call(
                    func=Name(id='max', ctx=Load()),
                    args=[
                        BinOp(
                            left=UnaryOp(op=USub(), operand=in0),
                            op=Add(),
                            right=in1),
                        Constant(value=0)],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', 'size', (List() | Tuple()) as in0], 'len(x0)', 'size', 'eval', ('body', -1, 'value'), 'size := get_size_of_list_literal(in0)')
            case Call(
                func=Name(id='len', ctx=Load()),
                args=[
                    (List() | Tuple()) as in0],
                keywords=[]) if size := get_size_of_list_literal(in0):
                nnode = size
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['*cargs', Constant(min(*cval))], 'min(*cargs)', 'cmin', 'eval', ('body', -1, 'value'), '(cval := are_all_constants(cargs))')
            case Call(
                func=Name(id='min', ctx=Load()),
                args=[
                    *cargs],
                keywords=[]) if (cval := are_all_constants(cargs)):
                nnode = Constant(min(*cval))
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['*cargs', Constant(max(*cval))], 'max(*cargs)', 'cmax', 'eval', ('body', -1, 'value'), '(cval := are_all_constants(cargs))')
            case Call(
                func=Name(id='max', ctx=Load()),
                args=[
                    *cargs],
                keywords=[]) if (cval := are_all_constants(cargs)):
                nnode = Constant(max(*cval))
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall([(Constant() as inner), (Constant(0) | Constant(-1)), 'inner'], 'np.expand_dims(inner_match, zono)', 'np.full(1, inner)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='expand_dims',
                    ctx=Load()),
                args=[
                    (Constant() as inner),
                    (Constant(0) | Constant(-1))],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='full',
                        ctx=Load()),
                    args=[
                        Constant(value=1),
                        inner],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['inner', 'dims', 'rdim', dims_extend(dims, Constant(1), rdim)], 'np.expand_dims(np.full(dims, inner), rdim)', 'np.full(new_dims, inner)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='expand_dims',
                    ctx=Load()),
                args=[
                    Call(
                        func=Attribute(
                            value=Name(id=self.aliases.numpy, ctx=Load()),
                            attr='full',
                            ctx=Load()),
                        args=[
                            dims,
                            inner],
                        keywords=[]),
                    rdim],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='full',
                        ctx=Load()),
                    args=[
                        dims_extend(dims, Constant(1), rdim),
                        inner],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['inner', 'reps', 'dims', 'rdim', dim_repeat(dims, reps, rdim)], 'np.repeat(np.full(dims, inner), reps, rdim)', 'np.full(new_dims, inner)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='repeat',
                    ctx=Load()),
                args=[
                    Call(
                        func=Attribute(
                            value=Name(id=self.aliases.numpy, ctx=Load()),
                            attr='full',
                            ctx=Load()),
                        args=[
                            dims,
                            inner],
                        keywords=[]),
                    reps,
                    rdim],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='full',
                        ctx=Load()),
                    args=[
                        dim_repeat(dims, reps, rdim),
                        inner],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['inner', 'dim'], 'np.stack([inner], dim)', 'np.expand_dims(inner, dim)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='stack',
                    ctx=Load()),
                args=[
                    List(
                        elts=[
                            inner],
                        ctx=Load()),
                    dim],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='expand_dims',
                        ctx=Load()),
                    args=[
                        inner,
                        dim],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_UnaryOp(self, node):
        match node:
            # forall([Constant(value=c0), Constant(value=+c0)], '+c0', '_const')
            case UnaryOp(op=UAdd(), operand=Constant(value=c0)):
                nnode = Constant(value=+c0)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=-c0)], '-c0', '_const')
            case UnaryOp(op=USub(), operand=Constant(value=c0)):
                nnode = Constant(value=-c0)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=not c0)], 'not c0', '_const')
            case UnaryOp(op=Not(), operand=Constant(value=c0)):
                nnode = Constant(value=not c0)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_BoolOp(self, node):
        match node:
            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 or c1)], 'c0 or c1', '_const')
            case BoolOp(
                op=Or(),
                values=[
                    Constant(value=c0),
                    Constant(value=c1)]):
                nnode = Constant(value=c0 or c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            # forall([Constant(value=c0), Constant(value=c1), Constant(value=c0 and c1)], 'c0 and c1', '_const')
            case BoolOp(
                op=And(),
                values=[
                    Constant(value=c0),
                    Constant(value=c1)]):
                nnode = Constant(value=c0 and c1)
                self.modified = True
                copy_location(nnode, node)
                nnode.old = node
                return nnode

            case _:
                return self.generic_visit(node)

    def visit_Starred(self, node):
        match node:
            # forall(['in0'], '*np.meshgrid(in0)', 'in0')
            case Starred(
                value=Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='meshgrid',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[]),
                ctx=Load()):
                nnode = in0
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0'], '*np.meshgrid(in0, indexing="ij")', 'in0')
            case Starred(
                value=Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='meshgrid',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='indexing',
                            value=Constant(value='ij'))]),
                ctx=Load()):
                nnode = in0
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

class NumpySpecialize(Rewriter):
    def visit_Call(self, node):
        match node:
            # forall(['in0', Constant((0. as cv0))], 'np.full(in0, c0)', 'np.zeros(in0)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, float)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((0. as cv0))],
                keywords=[]) if isinstance(cv0, float):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='zeros',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((1. as cv0))], 'np.full(in0, c0)', 'np.ones(in0)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, float)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((1. as cv0))],
                keywords=[]) if isinstance(cv0, float):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='ones',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((False as cv0))], 'np.full(in0, c0)', 'np.zeros(in0, dtype=bool)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, bool)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((False as cv0))],
                keywords=[]) if isinstance(cv0, bool):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='zeros',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='bool', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((True as cv0))], 'np.full(in0, c0)', 'np.ones(in0, dtype=bool)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, bool)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((True as cv0))],
                keywords=[]) if isinstance(cv0, bool):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='ones',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='bool', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((0 as cv0))], 'np.full(in0, c0)', 'np.zeros(in0, dtype=int)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, int)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((0 as cv0))],
                keywords=[]) if isinstance(cv0, int):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='zeros',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='int', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((1 as cv0))], 'np.full(in0, c0)', 'np.ones(in0, dtype=int)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, int)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((1 as cv0))],
                keywords=[]) if isinstance(cv0, int):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='ones',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='int', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((0+0j as cv0))], 'np.full(in0, c0)', 'np.zeros(in0, dtype=complex)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, complex)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((0+0j as cv0))],
                keywords=[]) if isinstance(cv0, complex):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='zeros',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='complex', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', Constant((1+0j as cv0))], 'np.full(in0, c0)', 'np.ones(in0, dtype=complex)', 'eval', ('body', -1, 'value'), 'isinstance(cv0, complex)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='full',
                    ctx=Load()),
                args=[
                    in0,
                    Constant((1+0j as cv0))],
                keywords=[]) if isinstance(cv0, complex):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='ones',
                        ctx=Load()),
                    args=[
                        in0],
                    keywords=[
                        keyword(
                            arg='dtype',
                            value=Name(id='complex', ctx=Load()))])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

class NumpyReverser(Rewriter):
    def visit_Call(self, node):
        match node:
            # forall([var('v0'), 'in0', 'in1'], 'list(filter(lambda v0: in1, in0))', '[v0 for v0 in in0 if in1]')
            case Call(
                func=Name(id='list', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='filter', ctx=Load()),
                        args=[
                            Lambda(
                                args=arguments(
                                    posonlyargs=[],
                                    args=[
                                        arg(arg=v0)],
                                    kwonlyargs=[],
                                    kw_defaults=[],
                                    defaults=[]),
                                body=in1),
                            in0],
                        keywords=[])],
                keywords=[]):
                nnode = ListComp(
                    elt=Name(id=v0, ctx=Load()),
                    generators=[
                        comprehension(
                            target=Name(id=v0, ctx=Store()),
                            iter=in0,
                            ifs=[
                                in1],
                            is_async=0)])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            # forall(['in0', 'in1'], 'np.extract(in0, np.array(in1))', 'np.extract(in0, in1)')
            case Call(
                func=Attribute(
                    value=Name(id=self.aliases.numpy, ctx=Load()),
                    attr='extract',
                    ctx=Load()),
                args=[
                    in0,
                    Call(
                        func=Attribute(
                            value=Name(id=self.aliases.numpy, ctx=Load()),
                            attr='array',
                            ctx=Load()),
                        args=[
                            in1],
                        keywords=[])],
                keywords=[]):
                nnode = Call(
                    func=Attribute(
                        value=Name(id=self.aliases.numpy, ctx=Load()),
                        attr='extract',
                        ctx=Load()),
                    args=[
                        in0,
                        in1],
                    keywords=[])
                self.modified = True
                copy_location(nnode, node)
                nnode.old = None
                return nnode

            case _:
                return self.generic_visit(node)

ORDER = [ComprehensionRewriter, NumpyRewriter, NumpySpecialize, NumpyReverser]
__all__ = ('ORDER',)
__all__ += tuple([cls.__name__ for cls in ORDER])
